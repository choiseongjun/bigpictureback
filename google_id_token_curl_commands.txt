# 구글 ID 토큰 로그인 API 테스트 명령어

# 1. 구글 ID 토큰으로 로그인/회원가입
# 실제 구글 ID 토큰을 사용해야 합니다 (클라이언트에서 받은 토큰)
curl -X POST http://localhost:5500/api/auth/google-id-token \
  -H "Content-Type: application/json" \
  -d '{
    "id_token": "YOUR_GOOGLE_ID_TOKEN_HERE",
    "nickname": "사용자닉네임",
    "profile_image_url": "https://lh3.googleusercontent.com/a/example"
  }'

# 2. 응답 예시 (성공)
# {
#   "success": true,
#   "message": "구글 회원가입 성공",
#   "data": {
#     "member": {
#       "id": 1,
#       "email": "user@example.com",
#       "nickname": "사용자닉네임",
#       "profileImageUrl": "https://lh3.googleusercontent.com/a/example",
#       "region": null,
#       "gender": null,
#       "birthYear": null,
#       "personalityType": null,
#       "createdAt": "2024-01-01T00:00:00Z",
#       "updatedAt": "2024-01-01T00:00:00Z",
#       "lastLoginAt": "2024-01-01T00:00:00Z"
#     },
#     "authProvider": {
#       "id": 1,
#       "memberId": 1,
#       "providerType": "google",
#       "providerId": "123456789",
#       "providerEmail": "user@example.com",
#       "passwordHash": null,
#       "createdAt": "2024-01-01T00:00:00Z",
#       "updatedAt": "2024-01-01T00:00:00Z"
#     },
#     "googlePayload": {
#       "email": "user@example.com",
#       "name": "사용자 이름",
#       "picture": "https://lh3.googleusercontent.com/a/example",
#       "givenName": "사용자",
#       "familyName": "이름"
#     }
#   },
#   "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
#   "accessToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
#   "isNewUser": true
# }

# 3. 응답 예시 (기존 사용자 로그인)
# {
#   "success": true,
#   "message": "기존 계정으로 로그인 성공",
#   "data": { ... },
#   "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
#   "accessToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
#   "isNewUser": false
# }

# 4. 응답 예시 (토큰 검증 실패)
# {
#   "success": false,
#   "message": "ID 토큰 검증 실패: Invalid audience",
#   "data": null,
#   "token": null,
#   "is_new_user": null
# }

# 5. 환경변수 설정 (env.local 파일에 추가)
# GOOGLE_CLIENT_ID=your-google-client-id-here

# 6. 구글 클라이언트 ID 확인 방법
# 1. Google Cloud Console (https://console.cloud.google.com/) 접속
# 2. 프로젝트 선택 또는 새 프로젝트 생성
# 3. "API 및 서비스" > "사용자 인증 정보" 메뉴로 이동
# 4. "사용자 인증 정보 만들기" > "OAuth 2.0 클라이언트 ID" 선택
# 5. 애플리케이션 유형 선택 (웹 애플리케이션, Android, iOS 등)
# 6. 생성된 클라이언트 ID를 GOOGLE_CLIENT_ID 환경변수에 설정

# 7. 프론트엔드에서 구글 로그인 구현 예시 (JavaScript)
# 
# // Google Sign-In 초기화
# function initGoogleSignIn() {
#   gapi.load('auth2', function() {
#     gapi.auth2.init({
#       client_id: 'YOUR_GOOGLE_CLIENT_ID'
#     }).then(function(auth2) {
#       // 로그인 버튼 클릭 이벤트
#       auth2.signIn().then(function(googleUser) {
#         const idToken = googleUser.getAuthResponse().id_token;
#         
#         // 백엔드로 ID 토큰 전송
#         fetch('/api/auth/google-id-token', {
#           method: 'POST',
#           headers: {
#             'Content-Type': 'application/json',
#           },
#           body: JSON.stringify({
#             id_token: idToken,
#             nickname: googleUser.getBasicProfile().getName(),
#             profile_image_url: googleUser.getBasicProfile().getImageUrl()
#           })
#         })
#         .then(response => response.json())
#         .then(data => {
#           if (data.success) {
#             // 로그인 성공 처리
#             localStorage.setItem('token', data.token);
#             console.log('로그인 성공:', data);
#           } else {
#             console.error('로그인 실패:', data.message);
#           }
#         });
#       });
#     });
#   });
# } 